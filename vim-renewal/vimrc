if !1 | finish | endif

augroup vimrc
  autocmd!
augroup END

let s:cwd = fnamemodify(expand('<sfile>'), ':h:p')
function! s:config_file(rfp) abort
  return fnameescape(join([s:cwd, a:rfp], '/'))
endfunction

function! s:source_config(rfp) abort
  silent execute 'source' s:config_file(a:rfp)
endfunction

if vimrc#is_startup()
  if &encoding !=? 'utf-8'
    let &termencoding = &encoding
    if !vimrc#platform#is_nvim() | setglobal encoding=utf-8 | endif
  endif
  language message C
  scriptencoding utf-8

  setglobal fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,cp20932
  setglobal fileformats=unix,mac,dos

  setglobal helplang& helplang=en,ja
  setglobal secure

  let $VIMDIR = s:cwd

  if vimrc#platform#is_windows()
    setglobal runtimepath^=$VIMDIR
    setglobal runtimepath+=$VIMDIR/after
    setglobal shellslash
  endif

  if !exists('$VIM_CACHE_DIR')
    if exists('$XDG_CACHE_HOME')
      let $VIM_CACHE_DIR = expand('$XDG_CACHE_HOME/vim')
    else
      let $VIM_CACHE_DIR = expand('$HOME/.cache/vim')
    endif
  endif

  setglobal backupdir=$VIM_CACHE_DIR/back
  call vimrc#fs#mkdir_unless_exist(expand(&backupdir))
endif

" Load plugins if applicable
if filereadable(s:config_file('plugins.vim'))
  call s:source_config('plugins.vim')
else
  call vimrc#log#normal('No plugins')
endif

" colorscheme
if !get(g:,'colorscheme_specified', 0)
  setglobal background=dark
  colorscheme slate
endif

" timeout
setglobal ttimeout timeoutlen=1000 ttimeoutlen=50

" Swap file
set noswapfile undofile
let &undodir = &backupdir


" File formats
let &fileencoding = &encoding
set fileformat=unix
set formatoptions& formatoptions+=mM
if has('multi_byte_ime')
  set iminsert=0 imsearch=0
endif
if exists('*autofmt#japanese#formatexpr')
  set formatexpr=autofmt#japanese#formatexpr()
endif


" Window option
setglobal modeline
setglobal showcmd laststatus=2
set cmdheight=1
setglobal splitright splitbelow
setglobal switchbuf& switchbuf+=split
setglobal display=lastline
set number relativenumber scrolloff=5 textwidth=0

setglobal showmatch matchtime=1 matchpairs& matchpairs+=<:>
setglobal list listchars=tab:>\ ,trail:~,extends:>,precedes:<
setglobal nolinebreak
setglobal whichwrap=b,s,h,l,<,>,[,] backspace=indent,eol,start

setglobal hlsearch incsearch nowrapscan ignorecase smartcase

setglobal autoread lazyredraw
setglobal hidden
setglobal updatetime=100
if has('mouse')
  setglobal mouse+=a
endif
setglobal clipboard=unnamed
setglobal shortmess& shortmess+=I

setglobal autoindent copyindent preserveindent smartindent
setglobal cinoptions& cinoptions+=h0,(4,Us,p0
setglobal cinkeys& cinkeys+=0=break
setglobal foldmethod=marker foldlevelstart=0 foldopen=all
setglobal colorcolumn=100
setglobal smarttab
set tabstop=4 shiftwidth=4 softtabstop=0 expandtab
set breakindent showbreak=\|> nolinebreak

" Completion
setglobal complete& complete+=k
setglobal infercase
setglobal wildmenu wildmode=longest,full
setglobal wildignorecase wildignore=*.o,*.class,*.beam,*.dvi,*.pdf
setglobal pumheight=10

setglobal spelllang& spelllang+=cjk
setglobal nrformats& nrformats-=octal

setglobal virtualedit& virtualedit+=block

if vimrc#executable('rg')
  setglobal grepprg=rg\ --vimgrep\ --no-heading
  setglobal grepformat=%f:%l:%c:%m,%f:%l:%m
elseif vimrc#executable('ag')
  setglobal grepprg=ag\ --vimgrep
  setglobal grepformat=%f:%l:%c:%m
endif

autocmd vimrc BufEnter,WinEnter,BufWinEnter * let &l:numberwidth = len(line("$")) + 1
autocmd vimrc BufWritePre * call vimrc#fs#auto_mkdir_on_write(expand('<afile>:p:h'), v:cmdbang)
autocmd vimrc FileType gitcommit execute "normal! gg"

if vimrc#version#is_nvim()
  autocmd vimrc BufRead,BufNewFile *.nvim setlocal filetype=vim
  autocmd vimrc CursorHold * if exists(':rshada') | rshada | wshada | endif
endif


" Mappings
let mapleader = "\\"

imap OA <UP>
imap OB <Down>
imap OC <Right>
imap OD <Left>
nnoremap j gj
onoremap j gj
xnoremap j gj
nnoremap k gk
onoremap k gk
xnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk

nnoremap <Tab> <C-w>w
nnoremap <S-Tab> <C-w>W

nnoremap > >>
nnoremap < <<
xnoremap > >gv
xnoremap < <gv

vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
nnoremap Y y$

nnoremap x "_x
nnoremap s "_s

nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Esc>
nmap S "zyiw:let @/ = '\<' . @z . '\>'<CR>:%s/<C-r>///gc<Left><Left><Left>

nnoremap <expr> K (&filetype is# 'vim' ? (':help ' . fnameescape(expand('<cword>')) . '<CR>') : 'K')

map <C-c> g<C-g>
tnoremap <ESC> <C-\><C-n>

autocmd FileType help,diff,qf nnoremap <silent><buffer> q :<C-u>q<CR>

nnoremap <silent> <Space>n :<C-u>call vimrc#toggle_variable("&relativenumber")<CR>
nnoremap <silent> <Space>q :<C-u>call vimrc#open_qf_or_loclist()<CR>


" Load local vimrc
function! s:load_local_vimrc() abort
  let s:local_vimrc = findfile('.vimrc.local', '.;')
  if filereadable(s:local_vimrc)
    execute 'source' s:local_vimrc
  endif
endfunction
autocmd vimrc VimEnter * call s:load_local_vimrc()
" vim:ft=vim:ts=2:sw=2:fdm=marker
