#================================================
# vim/rc/plugin_list.toml
#================================================

# core plugins
#------------------------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

## Enables deno API
[[plugins]]
repo = 'vim-denops/denops.vim'

# view
#------------------------------------------------
[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'mhartington/oceanic-next'

[[plugins]]
repo        = 'ryanoasis/vim-devicons'
lazy        = 1
on_source   = ['lightline.vim', 'nerdtree']
hook_source = '''
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  if vimrc#is_linux()
    set guifont=Hack\ Nerd\ Font\ 11
  else
    set guifont=Hack_Nerd_Font:h11
  endif
'''

[[plugins]]
repo     = 'itchyny/lightline.vim'
hook_add = 'source $VIMDIR/rc/lightline.vim'

[[plugins]]
repo     = 'Yggdroot/indentLine'
lazy     = 1
on_event = 'BufRead'
hook_add = '''
  let g:indentLine_enabled = 1
  let g:indentLine_leadingSpaceEnabled = 1

  let g:indentLine_setConceal = 1
  let g:indentLine_conceallevel = 1
  let g:indentLine_concealcursor = ''

  let g:indentLine_char = '¦'
  let g:indentLine_leadingSpaceChar = ''

  let g:indentLine_setColors = 1
  let g:indentLine_color_term = 241
'''

[[plugins]]
repo     = 'osyo-manga/vim-precious'
lazy     = 1
depends  = ['context_filetype.vim']
on_cmd   = ['PreciousSwitch', 'PreciousReset']
hook_add = '''
  augroup Precious
    autocmd!
    autocmd FileType toml :PreciousSwitch
  augroup END
'''

[[plugins]]
repo     = 'itchyny/vim-cursorword'
hook_add = '''
  let g:cursorword = 1

  function! s:toggle_cursorword() abort
    let g:cursorword = !g:cursorword
    call cursorword#matchadd()
  endfunction

  command! ToggleCorsorword call s:toggle_cursorword()
'''

[[plugins]]
repo     = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
'''

# search
#------------------------------------------------
[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = '<Plug>'
hook_add    = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 0
  let g:EasyMotion_use_upper = 0
  let g:EasyMotion_use_smartsign_us = 1
  let g:EasyMotion_startofline = 0
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1

  nmap <C-f> <Plug>(easymotion-sn)
  nmap / <Plug>(easymotion-fn)
  nmap ? <Plug>(easymotion-Fn)
  nmap ; <Plug>(easymotion-bd-n)
'''

[[plugins]]
repo       = 'haya14busa/vim-asterisk'
on_map     = '<Plug>'
hook_add   = '''
  map * <Plug>(asterisk-z*)
  map g* <Plug>(asterisk-gz*)
  map # <Plug>(asterisk-z#)
  map g# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 't9md/vim-quickhl'
lazy     = 1
on_map   = '<Plug>'
hook_add = '''
  nmap <Leader>m <Plug>(quickhl-manual-this)
  xmap <Leader>m <Plug>(quickhl-manual-this)
  nmap <Leader>w <Plug>(quickhl-manual-this-whole-word)
  xmap <Leader>w <Plug>(quickhl-manual-this-whole-word)
'''

# completion
#------------------------------------------------
# [[plugins]]
# repo        = 'zxqfl/tabnine-vim'
# lazy        = 1
# on_event    = ['InsertEnter']
# hook_add    = '''
#   let s:config_dir = expand('$VIMDIR/rc/tabnine')

#   if vimrc#is_osx()
#     let s:tabnine_config_dir = expand('$HOME/Library/Preferences/TabNine')
#   elseif vimrc#is_linux()
#     let s:tabnine_config_dir = expand('$XDG_CONFIG_HOME/TabNine')
#   endif

#   if get(s:, 'tabnine_config_dir', '') ==# ''
#     echomsg 'Destination for TabNineConfig is not defined'
#   elseif !isdirectory(s:tabnine_config_dir)
#     call vimrc#mklink(s:config_dir, s:tabnine_config_dir)
#     echomsg 'Create link ' . s:tabnine_config_dir . ' -> ' . s:config_dir
#   endif
# '''
# hook_source = '''
#   inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
#   inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
# '''
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1

  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_signs_warning = {'text': '!'}

  let g:lsp_signature_help_enabled = 0
'''

[[plugins]]
repo     = 'thinca/vim-template'
lazy     = 1
on_cmd   = 'TemplateLoad'
hook_add = '''
  source $VIMDIR/rc/template.vim
'''

[[plugins]]
repo     = 'mattn/vim-sonictemplate'
lazy     = 1
on_map   = ['<plug>(sonictemplate)', '<plug>(sonictemplate-']
on_ft    = ['stpl']
on_func  = ['sonictemplate#']
on_cmd   = ['Template']
hook_add = '''
  autocmd MyCmdGroup BufNewFile,BufRead *.stpl set filetype=stpl
  let g:sonictemplate_vim_template_dir = [expand('$VIMDIR/template')]
'''

# linter
#------------------------------------------------
# [[plugins]]
# repo = 'prabirshrestha/async.vim'

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'

# [[plugins]]
# repo = 'kitagry/asyncomplete-tabnine.vim'
# build = './install.sh'
# hook_add = '''
#   autocmd User lsp-setup call asyncomplete#register_source(asyncomplete#sources#tabnine#get_source_options({
#         \   'name': 'tabnine',
#         \   'allowlist': ['*'],
#         \   'completor': function('asyncomplete#sources#tabnine#completor'),
#         \   'config': {
#         \     'line_limit': 1000,
#         \     'max_num_result': 20,
#         \   },
#         \ }))
# '''

[[plugins]]
repo     = 'dense-analysis/ale'
hook_add = '''
  let g:ale_lint_on_save          = 1
  let g:ale_lint_on_text_changed  = 'normal'
  let g:ale_lint_on_enter         = 0
  let g:ale_open_list             = 1
  let g:ale_keep_list_window_open = 0
  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = '!'
  let g:ale_echo_msg_error_str    = g:ale_sign_error
  let g:ale_echo_msg_warning_str  = g:ale_sign_warning
  let g:ale_echo_msg_format       = '[%linter%] %s [%severity%]'

  set omnifunc+=ale#completion#OmniFUnc

  nmap <silent> <C-p> <Plug>(ale_previous_wrap)
  nmap <silent> <C-n> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'rhysd/vim-lsp-ale'
hook_add = '''
  source $VIMDIR/rc/linter_config.vim
'''

## Vim
[[plugins]]
repo      = 'ynkdir/vim-vimlparser'

[[plugins]]
repo    = 'syngan/vim-vimlint'
lazy    = 1
depends = ['vim-vimlparser']
on_func = 'vimlint#vimlint'

# utility
#------------------------------------------------
[[plugins]]
repo     = 'tpope/vim-commentary'
lazy     = 1
on_cmd   = 'Commentary'
hook_add = '''
  map <silent> <Leader>c :Commentary<CR>
'''

[[plugins]]
repo   = 'h1mesuke/vim-alignta'
lazy   = 1
on_cmd = 'Align'

[[plugins]]
repo     = 'ntpeters/vim-better-whitespace'
lazy     = 1
on_event = 'InsertEnter'
hook_add = '''
  let g:strip_whitespace_on_save = 1
  let g:strip_whitelines_at_eof = 1
'''

[[plugins]]
repo     = 'AndrewRadev/switch.vim'
lazy     = 1
on_cmd   = 'Switch'
on_func  = 'switch#Switch'
hook_add = '''
  let g:switch_mapping = ""
  nmap <silent> <Leader>s :Switch<CR>
'''

[[plugins]]
repo     = 'cohama/lexima.vim'
lazy     = 1
on_event = 'InsertEnter'

[[plugins]]
repo        = 'sbdchd/neoformat'
lazy        = 1
on_cmd      = 'Neoformat'
hook_source = 'source $VIMDIR/rc/neoformat.vim'

[[plugins]]
repo     = 'vim-scripts/autodate.vim'
lazy     = 1
on_event = 'BufWritePre'
hook_add = '''
  let g:autodate_keyword_pre  = "Last Change:"
  let g:autodate_keyword_post = "."
  let g:autodate_format       = "%d %b. %Y"
'''

[[plugins]]
repo     = 'scrooloose/nerdtree'
lazy     = 1
on_cmd   = ['NERDTree', 'NERDTreeFind', 'NERDTreeToggle']
hook_add = '''
  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeQuitOnOpen = 0
  let g:NERDTreeShowHidden = 1
'''

[[plugins]]
repo      = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo     = 'machakann/vim-sandwich'

[[plugins]]
repo = 'andymass/vim-matchup'

[[plugins]]
repo  = 'editorconfig/editorconfig-vim'
lazy  = 1
on_if = 'filereadable(".editorconfig")'

[[plugins]]
repo = 'voldikss/vim-floaterm'
lazy = 1
on_cmd = ['FloatermNew']
on_func = ['floaterm#']
hook_add = '''
  augroup Floaterm
    autocmd!
  augroup END
  let g:floaterm_autoclose = 1
  nnoremap <expr> <silent> <Leader>t floaterm#buflist#first() == -1 ? '<Cmd>FloatermNew<CR>' : '<Cmd>FloatermToggle<CR>'
'''
hook_source = '''
autocmd MyCmdGroup User FloatermOpen tnoremap <buffer> <silent> <C-t> <C-\><C-n>:FloatermToggle<CR>
'''

[[plugins]]
repo = 's417-lama/carbonpaper.vim'
lazy = 1
on_cmd = ['CarbonPaper']

# syntax
#------------------------------------------------
## C/C++
[[plugins]]
repo  = 'vim-jp/cpp-vim'

[[plugins]]
repo  = 'octol/vim-cpp-enhanced-highlight'

## Scala
[[plugins]]
repo     = 'derekwyatt/vim-scala'
lazy     = 1
on_ft    = ['scala', 'sbt.scala']
hook_add = '''
  let g:scala_scaladoc_indent = 1
  autocmd! BufRead,BufNewFile *.scala set filetype=scala
  autocmd! BufRead,BufNewFile *.sbt set filetype=sbt.scala commentstring=//\ %s
  autocmd! FileType scala setlocal tabstop=2 shiftwidth=2
'''

## TypeScript
[[plugins]]
repo     = 'leafgarland/typescript-vim'
lazy     = 1
on_ft    = ['typescript']
hook_add = '''
  autocmd! BufNewFile,BufRead *.ts  set filetype=typescript
  autocmd! BufNewFile,BufRead *.tsx set filetype=typescript
  autocmd! FileType typescript setlocal tabstop=2 shiftwidth=2
'''

## TOML
[[plugins]]
repo      = 'cespare/vim-toml'
lazy      = 1
on_ft     = 'toml'
hook_add  = '''
  autocmd! BufNewFile,BufRead *.toml set filetype=toml
'''

## YAML
[[plugins]]
repo  = 'stephpy/vim-yaml'

## Elixir
[[plugins]]
repo = 'elixir-editors/vim-elixir'

# external commands
#------------------------------------------------
## Git
[[plugins]]
repo        = 'lambdalisue/gina.vim'
lazy        = 1
on_cmd      = ['Gina']
on_func     = 'gina#'
hook_source = '''
  autocmd! FileType gina-commit execute "normal! G"

  for kind in ['log', 'status', 'diff']
    call gina#custom#command#option(kind, '--opener', 'split')
    execute 'autocmd' 'MyCmdGroup Filetype gine-' . kind . ' nnoremap q :q<CR>'
  endfor

  cabbrev git Gina
'''

[[plugins]]
repo     = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_async   = 1
  let g:gitgutter_highlight_lines = 0

  let g:gitgutter_sign_added    = '+'
  let g:gitgutter_sign_modified = '*'
  let g:gitgutter_sign_removed  = '-'
  let g:gitgutter_sign_modified_removed = '*'

  noremap [git] <Nop>
  map <C-g> [git]
  nmap <silent> [git]h :GitGutterLineHighlightsToggle<CR>
  nmap <silent> [git]n :GitGutterNextHunk<CR>
  nmap <silent> [git]p :GitGutterPrevHunk<CR>
'''

[[plugins]]
repo   = 'tpope/vim-fugitive'
lazy   = 1
on_cmd = ['FugitiveFind']

## FZF
[[plugins]]
repo      = '$FZF_HOME'
if        = 'exists("$FZF_HOME") && executable("fzf")'
lazy      = 1
on_source = ['fzf.vim']

[[plugins]]
repo     = 'junegunn/fzf.vim'
if       = 'executable("fzf")'
lazy     = 1
on_func  = 'fzf#'
on_event = ['VimEnter']
hook_add = 'source $VIMDIR/rc/fzf.vim'

## silicon
[[plugins]]
repo        = 'segeljakt/vim-silicon'
if          = 'executable("silicon")'
lazy        = 1
on_cmd      = ['Silicon']
hook_source = '''
  let g:silicon = {
        \ 'theme': 'OneHalfDark',
        \ 'background': '#000000',
        \ 'pad-horiz': 0,
        \ 'pad-vert': 0,
        \ 'round-corner': v:false,
        \ 'window-controls': v:false
        \}
'''

# dependencies
#------------------------------------------------
[[plugins]]
repo      = 'Shougo/context_filetype.vim'
lazy      = 1
on_source = ['neosnippet.vim', 'vim-precious']
hook_add  = 'source $VIMDIR/rc/content_filetype.vim'

[[plugins]]
repo    = 'Shougo/neco-syntax'
lazy    = 1
on_func = ['necosyntax#']

[[plugins]]
repo    = 'Shougo/neco-vim'
lazy    = 1
on_func = ['necovim#']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_func = ['neoinclude#']
# vim:ft=toml:ts=2:sw=2:fdm=marker:et
