#================================================
# vim/rc/utility.toml
#
# Utility plugins
#================================================
[[plugins]]
repo        = 'tpope/vim-commentary'
on_cmd      = 'Commentary'
hook_add    = '''
  map <silent> <Leader>c :Commentary<CR>
'''

[[plugins]]
repo        = 'h1mesuke/vim-alignta'
on_cmd      = 'Align'

[[plugins]]
repo        = 'thinca/vim-template'
on_cmd      = 'TemplateLoad'
hook_add    = 'call plugins#utility#register_template()'

[[plugins]]
repo        = 'ntpeters/vim-better-whitespace'
on_event    = 'InsertEnter'
hook_source = '''
  let g:strip_whitespace_on_save = 1
  let g:strip_whitelines_at_eof = 1
'''

[[plugins]]
repo        = 'AndrewRadev/switch.vim'
on_cmd      = 'Switch'
on_func     = 'switch#Switch'
hook_source = '''
  let g:switch_mapping = ""
'''

[[plugins]]
repo        = 'cohama/lexima.vim'
on_event    = 'InsertEnter'

[[plugins]]
repo        = 'sbdchd/neoformat'
on_cmd      = 'Neoformat'
hook_add    = '''
  let g:neoformat_basic_format_trim = 1
  let g:neoformat_only_msg_on_error = 1
  let g:neoformat_rules = get(g:, 'neoformat_rules', {})

  call plugins#neoformat#register_formatter()
'''

[[plugins]]
repo        = 'vim-scripts/autodate.vim'
on_event    = 'BufWritePre'
hook_source = '''
  let g:autodate_keyword_pre  = "Last Change:"
  let g:autodate_keyword_post = "."
  let g:autodate_format       = "%d %b. %Y"
'''

[[plugins]]
repo     = 'scrooloose/nerdtree'
on_cmd   = ['NERDTree', 'NERDTreeFind', 'NERDTreeToggle']
hook_add = '''
  " nmap <silent> <Leader>f :<C-u>NERDTreeToggle<CR>
'''
hook_source = '''
  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeQuitOnOpen = 0
  let g:NERDTreeShowHidden = 1
'''

[[plugins]]
repo      = 'Xuyuanp/nerdtree-git-plugin'
on_source = 'nerdtree'

[[plugins]]
repo        = 'terryma/vim-expand-region'
on_map      = ['<Plug>(expand_region_expand)']
hook_add    = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''
hook_source      = '''
  let g:expand_region_text_objects = {
      \ 'iw': 1,
      \ 'iW': 0,
      \ 'i"': 1,
      \ "i'": 0,
      \ 'i]': 1,
      \ 'ib': 1,
      \ 'iB': 1,
      \ 'il': 1,
      \ 'ip': 1,
      \ 'ie': 0
      \}
'''
hook_post_source = '''
  call expand_refion#custom_text_objects({
      \ 'a]': 1,
      \ 'ab': 1,
      \ 'aB': 1
      \})
'''

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = '<Plug>'
hook_add    = '''
  noremap [easy-motion] <Nop>
  nmap m [easy-motion]

  nmap [easy-motion]f <Plug>(easymotion-fn)
  nmap [easy-motion]m <Plug>(easymotion-sn)
  nmap [easy-motion]h <Plug>(easymotion-linebackward)
  nmap [easy-motion]j <Plug>(easymotion-j)
  nmap [easy-motion]k <Plug>(easymotion-k)
  nmap [easy-motion]l <Plug>(easymotion-lineforward)
  nmap [easy-motion]w <Plug>(easymotion-bd-w)
  nmap [easy-motion]e <Plug>(easymotion-bd-e)
'''
hook_source = '''
  let g:EasyMotion_do_mapping = 0         " Disable default mappings
  let g:EasyMotion_smartcase = 1          " Turn on case insensitive feature
  let g:EasyMotion_use_upper = 0          " Use uppercase target labels and type as a lower case
  let g:EasyMotion_smartcase = 1          " type `l` and match `l`&`L`
  let g:EasyMotion_use_smartsign_us = 1   " Smartsign (type `3` and match `3`&`#`)
  let g:EasyMotion_startofline = 0        " keep cursor column when JK motion
'''

[[plugins]]
repo       = 'haya14busa/vim-asterisk'
on_map     = '<Plug>'
hook_add   = '''
  map * <Plug>(asterisk-z*)
  map g* <Plug>(asterisk-gz*)
  map # <Plug>(asterisk-z#)
  map g# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo     = 'machakann/vim-sandwich'
on_event = 'VimEnter'
# vim:ft=toml:ts=2:sw=2:fdm=marker
