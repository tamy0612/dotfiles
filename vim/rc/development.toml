## LSP
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_source = ['vim-lsp-ale']
hook_add = '''
  let g:lsp_signature_help_enabled = 0
'''
hook_source = '''
  call popup_preview#enable()
'''

## Linter
[[plugins]]
repo     = 'dense-analysis/ale'
on_source = ['vim-lsp-ale']
hook_add = '''
  let g:ale_lint_on_save = 1
  let g:ale_fix_on_save = 1
  let g:ale_floating_preview = 1
  let g:ale_open_list             = 1
  let g:ale_keep_list_window_open = 0
  let g:ale_hover_cursor = 1
  let g:ale_lint_on_text_changed  = 'normal'
  let g:ale_lint_on_enter         = 0
  let g:ale_sign_error = 'âœ—'
  let g:ale_sign_warning = '!'
  let g:ale_echo_msg_error_str    = g:ale_sign_error
  let g:ale_echo_msg_warning_str  = g:ale_sign_warning
  let g:ale_echo_msg_format       = '[%linter%] %s [%severity%]'
'''
hook_source = '''
  set omnifunc=ale#completion#OmniFunc
  set completeopt& completeopt+=menuone,popup,noinsert,noselect,preview
  set completepopup=height:10,width:60,highlight:InfoPopup

  nmap <silent> <C-p> <Plug>(ale_previous_wrap)
  nmap <silent> <C-n> <Plug>(ale_next_wrap)
  nmap <silent> <C-k> <Plug>(ale_detail)
'''

[[plugins]]
repo = 'rhysd/vim-lsp-ale'
on_source = ['ddc.vim']
on_event = ['InsertEnter']
hook_add = '''
  autocmd MyCmdGroup CursorHold * ALEDetail

  source $VIMDIR/rc/linter_config.vim
'''

[[plugins]]
repo    = 'syngan/vim-vimlint'
depends = ['vim-vimlparser']
on_func = 'vimlint#vimlint'

[[plugins]]
repo      = 'ynkdir/vim-vimlparser'
on_source = ['vim-vimlint']

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = ['vim-lsp']
depends = ['denops.vim']

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = ['vim-lsp']
depends = ['denops.vim']
hook_add = '''
  " let g:signature_help_config = #{
  "       \ contentsStyle: "full",
  "       \ viewStyle: "floating"
  "       \ }
  let g:signature_help_config = #{
        \ contentsStyle: "remainingLabels",
        \ viewStyle: "virtual"
        \ }
'''

## Completion
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_event = ['InsertEnter']
hook_add = '''
  let g:asyncomplete_auto_popup = 1
  let g:asyncomplete_auto_completeopt = 0
'''
hook_source = '''
  set completeopt& completeopt+=menuone,popup,noinsert,noselect,preview
  set completepopup=height:10,width:60,highlight:InfoPopup

  function! s:check_back_space() abort
      let col = col('.') - 1
      return col <= 0 || getline('.')[col - 1]  =~# '\s'
  endfunction

  inoremap <expr> <TAB>
      \ pumvisible() ?
      \   '<C-n>' :
      \   (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \       '<TAB>' : '<C-n>'
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
  \ 'priority': 10
  \ }))
'''

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
# on_source = ['asyncomplete.vim', 'vim-lsp']

# [[plugins]]
# repo = 'Shougo/ddc.vim'
# on_event = ['InsertEnter']
# hook_add = '''
#     " autocmd MyCmdGroup VimEnter * call dein#call_hook('post_source')
# '''
# hook_source = '''
#     source $VIMDIR/rc/ddc.vim
# '''

# [[plugins]]
# repo = 'Shougo/ddc-ui-native'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'Shougo/pum.vim'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'Shougo/ddc-ui-pum'
# on_source = ['ddc.vim', 'pum.vim']

# [[plugins]]
# repo = 'tani/ddc-fuzzy'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'Shougo/ddc-source-around'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'tani/ddc-path'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'statiolake/ddc-ale'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'shun/ddc-source-vim-lsp'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'Shougo/ddc-source-cmdline'
# on_source = ['ddc.vim']

# [[plugins]]
# repo = 'Shougo/ddc-source-cmdline-history'
# on_source = ['ddc.vim']

## Formatter
# [[plugins]]
# repo        = 'sbdchd/neoformat'
# on_cmd      = 'Neoformat'
# hook_source = '''
#   source $VIMDIR/rc/neoformat.vim
# '''

# [[plugins]]
# repo  = 'editorconfig/editorconfig-vim'
# on_if = 'filereadable(expand(getcwd() . "/.editorconfig"))'

## Git
[[plugins]]
repo        = 'lambdalisue/gina.vim'
on_cmd      = ['Gina']
on_func     = 'gina#'
hook_source = '''
  autocmd! FileType gina-commit execute "normal! G"

  for kind in ['log', 'status', 'diff']
    call gina#custom#command#option(kind, '--opener', 'split')
    execute 'autocmd' 'MyCmdGroup Filetype gine-' . kind . ' nnoremap q :q<CR>'
  endfor

  cabbrev git Gina
'''

[[plugins]]
repo     = 'airblade/vim-gitgutter'
on_func  = ['GitGutterGetHunkSummary']
on_cmd   = ['GitGutter*']
hook_add = '''
  let g:gitgutter_async   = 1
  let g:gitgutter_highlight_lines = 0

  let g:gitgutter_sign_added    = '+'
  let g:gitgutter_sign_modified = '*'
  let g:gitgutter_sign_removed  = '-'
  let g:gitgutter_sign_modified_removed = '*'

  noremap [git] <Nop>
  map <C-g> [git]
  nmap <silent> [git]h :GitGutterLineHighlightsToggle<CR>
  nmap <silent> [git]n :GitGutterNextHunk<CR>
  nmap <silent> [git]p :GitGutterPrevHunk<CR>
'''

## Utility
[[plugins]]
repo = 'voldikss/vim-floaterm'
on_cmd = ['FloatermNew']
on_func = ['floaterm#']
hook_add = '''
  augroup Floaterm
    autocmd!
  augroup END
  let g:floaterm_autoclose = 1
  let g:floaterm_wintype = 'float'
  let g:floaterm_position = 'bottom'
  let g:floaterm_width = 0.8
  let g:floaterm_height = 0.4
  nnoremap <expr> <silent> <Leader>t floaterm#buflist#first() == -1 ? '<Cmd>FloatermNew<CR>' : '<Cmd>FloatermToggle<CR>'
'''
hook_source = '''
  autocmd MyCmdGroup User FloatermOpen tnoremap <buffer> <silent> <C-t> <C-\><C-n>:FloatermToggle<CR>
'''
# vim:ft=toml:ts=2:sw=2:fdm=marker:et
