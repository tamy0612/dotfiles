" finish loading if vim <= small
if !1 | finish | end


"================================================
" Initialize
"================================================
let g:is_windows  = has('win16') || has('win32') || has('win64')
let g:is_cygwin   = has('win32unix')
let g:is_osx      = !g:is_windows && !g:is_cygwin
      \ && ( has('mac') || has('macunix') || has('gui_macvim')
      \       || ( !executable('xdg-open') && system('uname') =~? '^darwin' ) )
let g:is_linux    = !g:is_windows && !g:is_cygwin && !g:is_osx && has('unix')

let g:is_gui = has('gui_running')

if g:is_windows
  language message en
  set shellslash
else
  language message C
endif

if has('nvim')
  let $VIMDIR   = $XDG_CONFIG_DIR . '/nvim'
else
  let $VIMDIR   = $HOME . '/.vim'
endif
if filereadable( $HOME . '/.vimrc.mine' )
  let $SECRETVIMRC = $HOME . '/.vimrc.mine'
  source $SECRETVIMRC
  let g:secret_vimrc_loaded = 1
endif
if g:is_gui
  let $MYGVIMRC = $VIMDIR . '/.gvimrc'
endif


"================================================
" Set runtimepath for windows
"================================================
if g:is_windows
  set runtimepath^=$VIMDIR
  set runtimepath+=$VIMDIR/after
endif


"================================================
" environment
"================================================
" Set backupdir $HOME/.vim/back
set backupdir=$VIMDIR/back
" Don't make the swapfile
set noswapfile
"let &directory = &backupdir
" Make undofile
set undofile
let &undodir = &backupdir
" use login shell
set shell=zsh


"================================================
" encode
"================================================
set enc=utf-8
set fenc=utf-8
set fencs=iso-2022-jp,utf-8,euc-jp,cp932
set formatoptions&
set formatoptions+=mM
set formatexpr=autofmt#japanese#formatexpr()
set fileformat=unix
set fileformats=unix,mac,dos


"================================================
" neobundle
"================================================
if has('vim_starting') && isdirectory($VIMDIR.'/bundle/neobundle.vim')
  set runtimepath+=$VIMDIR/bundle/neobundle.vim
  let g:enable_neobundle = 1
endif

if exists('g:enable_neobundle')

  let g:neobundle#enable_tail_path = 1
  let g:neobundle#default_options = {}

  call neobundle#begin( expand($VIMDIR.'/bundle/') )

  " Default plugins
  source $VIMDIR/bundle/_neobundle.list.vim
  " local plugins
  if filereadable( $HOME . '/.neobundle.local' )
    let $LOCALBUNDLES = $HOME . '/.neobundle.local'
    source $LOCALBUNDLES
  endif

  call neobundle#end()
  NeoBundleCheck

  let g:neobundle_loaded = 1

endif

filetype plugin indent on
syntax enable


"================================================
" view
"================================================
" Set title the file path
let &titleold = ""
let &titlestring = "%f"
" Show row number
set number
augroup numberwidth
  autocmd!
  autocmd BufEnter,WinEnter,BufWinEnter * let &l:numberwidth = len(line("$")) + 2
augroup END
" Don't show escape chars
set nolist
" Show status line
set laststatus=2
" cmd height = 1
set cmdheight=1
" Show commandsd
set showcmd
" colors
set t_Co=256
set background=dark
colorscheme moonshade
syntax on
" Show matches
set showmatch

"================================================
" edit
"================================================
" Indent
set autoindent
set smartindent
set cindent
set cinoptions&
"set cinoptions+=:0,g4,N0,h0,f0
set cinoptions+=h0,(4,Us,p0
" Tab
set tabstop=8
set softtabstop=2
set shiftwidth=2
set smarttab
set expandtab
" Folding
set foldmethod=marker
set foldlevelstart=0
" wrapping
set whichwrap=b,s,h,l,<,>,[,]
set backspace=indent,eol,start
set wildmenu
" Hiden buffer
set hidden
" Deny auto CR
set textwidth=0
" window
set splitright
set splitbelow
set scrolloff=10
set lazyredraw
set modeline

" search
set hlsearch
set nowrapscan
set ignorecase
set smartcase
set incsearch
set wildignore=*.o,*.class,*.beam,*.dvi,*.pdf


"================================================
" plugin configurations
"================================================
augroup AutoCmd "{{{
  autocmd!
  " mkdir when the target directory does not exist
  autocmd BufWritePre * call hook#write#auto_mkdir( expand('<afile>:p:h'), v:cmdbang )
  " remove extra spaces
  autocmd BufWritePre * call hook#write#space_clean()
  " reload ~/.vimrc when it was updated
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
  " reload ~/.vimrc.mine when it was updated  => only when .vimrc.mine exists
  if exists('g:secret_vimrc_loaded')
    autocmd BufWritePost $SECRETVIMRC source $SECRETVIMRC
  endif
  " reload ~/.gvimrc when it was updated  => only used in gVim
  if g:is_gui
    autocmd BufWritePost $MYGVIMRC source $MYGVIMRC
  endif
  " autocmd for each filetype
  autocmd FileType gitcommit execute "normal! gg"
  " omnifunc
  "autocmd FileType ada setlocal omnifunc=adacomplete#Complete
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType sql setlocal omnifunc=sqlcomplete#Complete
  autocmd FileType c setlocal omnifunc=ccomplete#Complete
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
  autocmd FileType java setlocal omnifunc=javacomplete#Complete
  autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
  if has('python3')
    autocmd FileType python setlocal omnifunc=python3complete#Complete
  else
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  endif
augroup END "}}}

" NeoBundle Config
if exists('g:neobundle_loaded')
  source $VIMDIR/bundle/_neobundle.config.vim
  call neobundle#call_hook('on_source')
endif


"================================================
" key mappings
"================================================
" cursor
imap OA <UP>
imap OB <Down>
imap OC <Right>
imap OD <Left>
nnoremap j gj
onoremap j gj
xnoremap j gj
nnoremap k gk
onoremap k gk
xnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk

" mode change
imap <C-@> <C-[>

" window
nnoremap <Tab> <C-w>w
nnoremap <C-S-h> <C-w>h
nnoremap <C-S-Left> <C-w><Left>
nnoremap <C-S-j> <C-w>j
nnoremap <C-S-Down> <C-w><Down>
nnoremap <C-S-k> <C-w>k
nnoremap <C-S-Up> <C-w><Up>
nnoremap <C-S-l> <C-w>l
nnoremap <C-S-Right> <C-w><Right>

" indent
xnoremap <TAB>  >
xnoremap <S-TAB>  <
nnoremap > >>
nnoremap < <<
xnoremap > >gv
xnoremap < <gv
nnoremap <silent> <Leader>= :<C-u>execute "normal!gg=G"<CR>

" edit
nnoremap <Leader>e :<C-u>e
nnoremap <Leader>en :<C-u>enew<CR>
nnoremap <Leader>es :<C-u>Scratch<CR>
nmap <Esc><Esc> :<C-u>nohlsearch<CR><Esc>

" quick help
nnoremap <C-h> :<C-u>help<Space><C-r><C-w><CR>


"================================================
" GUI setting
"================================================
if g:is_gui
  set showtabline=2
  set imdisable
  set antialias
  set guifont=Ricty\ 12
  set guioptions&
  set guioptions-=T
  set guicursor=a:blinkon0
  set lines=52 columns=120
  if g:is_windows
    set transparency=10
  endif
endif

" vim:ft=vim:ts=2:sw=2
