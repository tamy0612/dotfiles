# Completion  #{{{
[[plugins]]
repo        = 'Shougo/context_filetype.vim'
on_source   = ['deoplete.nvim', 'neocomplete.vim', 'neosnippet.vim']
hook_add    = '''
    if !exists('g:context_filetype#filetypes')
        let g:context_filetype#filetypes = {}
    endif
'''
hook_source = '''
    source $VIMDIR/config/plugins/extension/context_filetype.vim
'''

[[plugins]]
repo        = 'Shougo/deoplete.nvim'
depends     = 'context_filetype.vim'
on_source   = ['deoplete_clang', 'deoplete-jedi']
if          = "has('nvim')"
on_event    = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup            = 1
    let g:deoplete#enable_ignore_case           = 1
    let g:deoplete#enable_smart_case            = 1
    let g:deoplete#auto_completion_start_length = 2
    let g:deoplete#enable_reflesh_always        = 1
    let g:deoplete#enable_camel_case            = 1
    let g:deoplete#text_mode_filetypes          = {'_': 1}

    set completeopt=menuone,noselect,longest

    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#mappings#manual_complete()
    inoremap <silent><expr> <S-TAB>
                \ pumvisible() ? "\<C-p>" :
                \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-h>"

    inoremap <expr><Space>  pumvisible() ? deoplete#mappings#close_popup()."\<Space>" : "\<Space>"
    inoremap <expr><BS>     deoplete#mappings#smart_close_popup()."\<BS>"

    inoremap <expr><C-g> deoplete#mappings#undo_completion()
    inoremap <expr><C-l> deoplete#mappings#refresh()

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    source $VIMDIR/config/plugins/extension/deoplete.nvim
'''

[[plugins]]
repo        = 'Shougo/neocomplete.vim'
depends     = 'context_filetype.vim'
if          = "!has('nvim') && has('lua')"
on_event    = 'InsertEnter'
hook_source = '''
    set completeopt+=longest

    inoremap <expr><TAB> pumvisible() ? "\<Down>" : "\<Tab>"

    let g:acp_enableAtStartup                      = 0
    let g:neocomplete#enable_at_startup            = 1
    let g:neocomplete#enable_smart_case            = 1
    let g:neocomplete#enable_fuzzy_completion      = 1
    let g:neocomplete#max_list                     = 10
    let g:neocomplete#use_vimproc                  = 1
    let g:neocomplete#min_keyword_length           = 3
    let g:neocomplete#lock_buffer_name_pattern     = '\*ku\*'
    let g:neocomplete#auto_completion_start_length = 2
    let g:neocomplete#enable_auto_select           = 0
    let g:neocomplete#text_mode_filetypes          = {'_': 1}

    source $VIMDIR/config/plugins/extension/neocomplete.vim
'''

[[plugins]]
repo        = 'Shougo/neosnippet.vim'
on_source   = ['neocomplete.vim', 'deoplete.nvim']
hook_source = '''
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#snippets_directory = $VIMDIR.'/snippets'

    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand)
    imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    imap <expr><Down> pumvisible() ? "\<C-n>" : "\<Down>"
    imap <expr><Up> pumvisible() ? "\<C-p>" : "\<Up>"
    imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
                                         \ : pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
                                         \ : "\<TAB>"
'''

[[plugins]]
repo        = 'Shougo/neosnippet-snippets'
on_source   = 'neosnippet.vim'

[[plugins]]
repo        = 'Shougo/neoinclude.vim'
on_source   = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo        = 'ujihisa/neco-look'
on_source   = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo        = 'Shougo/neco-syntax'
on_source   = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo        = 'Shougo/neco-vim'
on_ft       = 'vim'

[[plugins]]
repo        = 'Shougo/echodoc.vim'
on_event    = 'InsertEnter'
hook_add    = '''
    set noshowmode
    let g:echodoc#enable_at_startup = 1
'''

[[plugins]]
repo        = 'kana/vim-smartinput'
on_event    = 'InsertEnter'
#}}}


# Unite  #{{{
[[plugins]]
repo        = 'Shougo/neomru.vim'
on_path     = '.*'
on_source   = ['unite.vim', 'denite.nvim']

[[plugins]]
repo        = 'Shougo/denite.nvim'
on_cmd      = 'Denite'
on_source   = 'denite-experimental.nvim'
if          = "has('nvim')"
hook_add    = '''
    source $VIMDIR/config/plugins/mapping/denite.nvim
'''
hook_post_source = '''
    source $VIMDIR/config/plugins/extension/denite.nvim
'''

[[plugins]]
repo        = 'tamy0612/denite-experimental.nvim'
depends     = ['denite.nvim']
on_cmd      = 'Denite'
if          = "has('nvim')"
hook_add    = '''
    nnoremap <silent> [denite]t :<C-u>Denite -auto-highlight -vertical-preview -buffer-name=search tags<CR>
'''
hook_post_source = '''
    call denite#custom#var('tags', 'ignore_types', ['i'])
'''

[[plugins]]
repo        = 'Shougo/unite.vim'
depends     = 'neomru.vim'
if          = "!has('nvim')"
hook_add    = '''
    source $VIMDIR/config/plugins/mapping/unite.vim
'''
hook_source = '''
    let g:unite_enable_start_insert = 0
    let g:unite_source_file_mru_limit = 50
    let g:unite_source_file_mru_filename_format = ''

    autocmd MyCmdGroup FileType unite call s:unite_my_keymappings()
    function! s:unite_my_keymappings()
        nnoremap <silent><buffer><expr> s unite#smart_map('s', unite#do_action('split'))
        inoremap <silent><buffer><expr> s unite#smart_map('s', unite#do_action('split'))
        nnoremap <silent><buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
        inoremap <silent><buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
        nnoremap <silent><buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
        inoremap <silent><buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
    endfunction

    source $VIMDIR/config/plugins/extension/unite.vim
'''

[[plugins]]
repo        = 'Shougo/unite-build'
if          = "dein#tap('unite.vim')"
depends     = 'unite.vim'

[[plugins]]
repo        = 'Shougo/unite-outline'
if          = "dein#tap('unite.vim')"
depends     = 'unite.vim'
hook_source = '''
    source $VIMDIR/config/plugins/extension/unite_outline.vim
'''

[[plugins]]
repo        = 'Shougo/unite-help'
if          = "dein#tap('unite.vim')"
depends     = 'unite.vim'

[[plugins]]
repo        = 'rhysd/unite-codic.vim'
if          = "dein#tap('unite.vim')"
depends     = ['unite.vim', 'codic-vim']
on_ft       = ['c', 'cpp', 'd', 'java', 'python', 'ruby']

[[plugins]]
repo        = 'pasela/unite-webcolorname'
if          = "dein#tap('unite.vim')"
depends     = 'unite.vim'

[[plugins]]
repo        = 'osyo-manga/unite-quickfix'
if          = "dein#tap('unite.vim')"
depends     = 'unite.vim'

[[plugins]]
repo        = 'osyo-manga/unite-filetype'
if          = "dein#tap('unite.vim')"
depends     = 'unite.vim'

[[plugins]]
repo        = 'ujihisa/unite-colorscheme'
if          = "dein#tap('unite.vim')"
depends     = ['unite.vim']

[[plugins]]
repo        = 'Shougo/neoyank.vim'
on_source   = ['unite.vim', 'denite.nvim']
#}}}


# Operator  #{{{
[[plugins]]
repo        = 'terryma/vim-expand-region'
on_map      = '<Plug>'
hook_add    = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''
hook_source = '''
    let g:expand_region_text_objects = {
        \ 'iw': 1,
        \ 'iW': 0,
        \ 'i"': 1,
        \ 'i'': 0,
        \ 'i]': 1,
        \ 'ib': 1,
        \ 'iB': 1,
        \ 'il': 1,
        \ 'ip': 1,
        \ 'ie': 0
        \}
    call expand_refion#custom_text_objects({
        \ 'a]': 1,
        \ 'ab': 1,
        \ 'aB': 1
        \})
'''

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = '<Plug>'
hook_add    = '''
    noremap [easy-motion] <Nop>
    nmap m [easy-motion]

    nmap [easy-motion]c <Plug>(easymotion-overwin-f)
    nmap [easy-motion]s <Plug>(easymotion-overwin-f2)
    nmap [easy-motion]h <Plug>(easymotion-linebackward)
    nmap [easy-motion]j <Plug>(easymotion-j)
    nmap [easy-motion]k <Plug>(easymotion-k)
    nmap [easy-motion]l <Plug>(easymotion-lineforward)
    nmap [easy-motion]w <Plug>(easymotion-bd-w)
    nmap [easy-motion]e <Plug>(easymotion-bd-e)
'''
hook_source = '''
    let g:EasyMotion_do_mapping = 0         " Disable default mappings
    let g:EasyMotion_smartcase = 1          " Turn on case insensitive feature
    let g:EasyMotion_use_upper = 0          " Use uppercase target labels and type as a lower case
    let g:EasyMotion_smartcase = 1          " type `l` and match `l`&`L`
    let g:EasyMotion_use_smartsign_us = 1   " Smartsign (type `3` and match `3`&`#`)
    let g:EasyMotion_startofline = 0        " keep cursor column when JK motion
'''

[[plugins]]
repo        = 'kana/vim-operator-user'
on_source   = ['vim-operator-replace', 'vim-operator-surround', 'vim-clang-format']
on_path     = '.*'

[[plugins]]
repo        = 'kana/vim-operator-replace'
depends     = 'vim-operator-user'
on_map      = [['nx', '<Plug>']]
hook_add    = '''
    xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo        = 'rhysd/vim-operator-surround'
depends     = ['vim-operator-user', 'vim-textobj-anyblock']
on_map      = '<Plug>'
hook_add    = '''
    nmap <silent>ys <Plug>(operator-surround-append)iw
    nmap <silent>ds <Plug>(operator-surround-delete)ab
    nmap <silent>cs <Plug>(operator-surround-replace)ab

    xmap <silent>ys <Plug>(operator-surround-append)
    xmap <silent>ds <Plug>(operator-surround-delete)
    xmap <silent>cs <Plug>(operator-surround-replace)
'''

[[plugins]]
repo        = 'chikatoike/concealedyank.vim'
on_map      = [['x', '<Plug>(operator-concealedyank)']]

[[plugins]]
repo        = 'kana/vim-textobj-user'
on_source   = 'vim-textobj-line'

[[plugins]]
repo        = 'kana/vim-textobj-line'
on_source   = 'vim-expand-region'
depends     = 'vim-textobj-user'

[[plugins]]
repo        = 'rhysd/vim-textobj-anyblock'
depends     = ['vim-textobj-user']
on_source   = 'vim-operator-surround'

[[plugins]]
repo        = 'AndrewRadev/switch.vim'
on_cmd      = ['Switch', 'SwitchReverse']
hook_add    = '''
    nnoremap <silent> <Leader>s :<C-u>Switch<CR>
    nnoremap <silent> <Leader>S :<C-u>SwitchReverse<CR>
'''
hook_source = '''
    let g:switch_mapping = ""
'''

# [[plugins]]
# repo        = 'terryma/vim-multiple-cursors'
# hook_source = '''
#     let g:multi_cursor_use_default_mapping = 0

#     let g:multi_cursor_next_key='<C-n>'
#     let g:multi_cursor_prev_key='<C-p>'
#     let g:multi_cursor_skip_key='<C-x>'
#     let g:multi_cursor_quit_key='<Esc>'
# '''
#}}}


# External  #{{{
[[plugins]]
repo        = 'itchyny/vim-external'
on_map      = '<Plug>'
hook_add    = '''
    nnoremap [external] <Nop>
    nmap <Leader>e [external]
    nmap <silent>  [external]e <Plug>(external-explorer)
    nmap <silent>  [external]b <Plug>(external-browser)
'''

# Filer  #{{{
[[plugins]]
repo        = 'scrooloose/nerdtree'
on_cmd      = ['NERDTree', 'NERDTreeFind', 'NERDTreeToggle']
hook_add    = '''
    nmap <silent> <Leader>f :<C-u>NERDTreeToggle<CR>
'''
hook_source = '''
    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeQuitOnOpen = 1
    let g:NERDTreeShowHidden = 1
'''
#}}}

# Shell  #{{{
[[plugins]]
repo        = 'Shougo/vimshell'
if          = "!has('nvim')"
on_map      = '<Plug>'
on_cmd      = ['VimShell', 'VimShellPop']
hook_add    = '''
    noremap  <Plug>(vimshell_toggle) :VimShell -toggle<CR>
    nnoremap <C-s> :<C-u>VimShellPop -toggle<CR>
    inoremap <C-s> <C-[>:<C-u>VimShellPop -toggle<CR>
'''
hook_source = '''
    let g:vimshell_split_command = ''
    let g:vimshell_enable_transient_user_prompt = 1
    let g:vimshell_force_overwrite_statusline = 1
    source $VIMDIR/config/plugins/extension/vimshell.vim
'''
#}}}

# Browser  #{{{
[[plugins]]
repo        = 'koron/codic-vim'
on_cmd      = 'Codic'

[[plugins]]
repo        = 'mattn/webapi-vim'
on_source   = ['excitetranslate-vim']

[[plugins]]
repo        = 'mattn/excitetranslate-vim'
depends     = 'webapi-vim'
on_cmd      = 'ExciteTranslate'

[[plugins]]
repo        = 'yuratomo/w3m.vim'
on_cmd      = ['W3m', 'W3mTab', 'W3mSplit', 'W3mVsplit']

[[plugins]]
repo        = 'tyru/open-browser.vim'
on_map      = '<Plug>'
on_source   = ['previm']
#}}}
#}}}


# Development #{{{
# Tools  #{{{
[[plugins]]
repo     = 'tpope/vim-fugitive'
on_cmd   = ['Gcommit', 'Gstatus']
on_func  = 'fugitive#'
hook_add = '''
    nnoremap [git] <Nop>
    nmap <Leader>g [git]
    nmap <silent>  [git]c :<C-u>Gcommit<CR>
    nmap <silent>  [git]s :<C-u>Gstatus<CR>
'''

[[plugins]]
repo        = 'kassio/neoterm'
if          = 'has("nvim")'
on_source   = 'vim-test'
on_cmd      = ['Topen', 'Tclose', 'Ttoggle', 'Tpos', 'Tmap']
hook_add    = '''
    let g:neoterm_position = 'horizontal'
    let g:neoterm_size = 20
    let g:neoterm_autoinsert = 1
    let g:neoterm_automap_keys = "\<Leader>T"

    nnoremap <silent> <Leader>t :<C-u>Ttoggle<CR>
    vnoremap <silent> <Leader>t :<C-u>TREPLSendSelection<CR>

    source $VIMDIR/config/plugins/extension/neoterm.nvim
'''

[[plugins]]
repo        = 'majutsushi/tagbar'
on_ft       = ['awk', 'c', 'cpp', 'd', 'java', 'python', 'ruby', 'tex', 'vim', 'R']
on_cmd      = 'TagbarToggle'
hook_add    = '''
    nnoremap <silent> <Leader>o :<C-u>TagbarToggle<CR>
'''
hook_source = '''
    let g:tagbar_compact = 1
    let g:tagbar_show_linenumbers = 1
    let g:tagbar_autoclose = 1
    let g:tagbar_autopreview = 1
    let g:tagbar_previewwin_pos = "below"
'''

[[plugins]]
repo        = 'SrcExpl'
on_ft       = ['awk', 'c', 'cpp', 'd', 'java', 'python', 'ruby', 'tex']
on_cmd      = 'SrcExplToggle'
hook_source = '''
    let s:cwd = getcwd()
    if isdirectory(s:cwd . "/src")
        let s:src_dir = s:cwd . "/src"
    elseif isdirectory(s:cwd . "/source")
        let s:src_dir = s:cwd . "/source"
    else
        let s:src_dir = s:cwd
    endif

    let g:SrcExpl_winHeight     = 20
    let g:SrcExpl_updateTagsCmd = 'ctags --sort=foldcase -R ' . s:src_dir

    if has('cscope')
        set csprg=cscope
        set csto=0
        set cst
        set nocsverb
        if filereadable("cscope.out")
            cs add cscope.out
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
        set csverb
        set cscopequickfix=s-,c-,d-,i-,t-,e-
    endif
'''
#}}}

# Build & Run  #{{{
[[plugins]]
repo        = 'neomake/neomake'
if          = 'has("nvim")'
on_cmd      = ['Neomake']
hook_add    = '''
    cabbrev mak Neomake
    cabbrev make Neomake
'''
hook_source = '''
    let g:neomake_open_list = 2
    let g:neomake_echo_current_error = 1

    source $VIMDIR/config/plugins/extension/neomake.nvim
'''

[[plugins]]
repo        = 'thinca/vim-quickrun'
on_map      = '<Plug>'
on_source   = ['shabadou.vim', 'vim-watchdogs']
hook_add    = '''
    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    nmap <silent> <Leader>q <Plug>(quickrun)
'''
hook_source = '''
    source $VIMDIR/config/plugins/extension/quickrun.vim
'''

[[plugins]]
repo        = 'thinca/vim-qfreplace'
on_ft       = ['unite', 'quickfix']

[[plugins]]
repo        = 'janko-m/vim-test'
on_cmd      = ['TestNearest', 'TestFile', 'TestSuite', 'TestLast', 'TestVisit']
hook_source = '''
    if dein#tap('neoterm')
        let test#strategy = 'neoterm'
    elseif has('nvim')
        let test#strategy = 'neovim'
    elseif dein#tap('vimproc')
        let test#strategy = 'vimproc'
    endif
'''

# [[plugins]]
# repo      = 'scrooloose/syntastic'
# on_cmd    = ['SyntasticCheck', 'SyntasticToggleMode']
# hook_add  = '''
#   nnoremap <silent> <C-c> :<C-u>SyntasticCheck<CR>
# '''
# hook_source = '''
#   let g:syntastic_error_symbol='x'
#   let g:syntastic_warning_symbol='!'
#   let g:syntastic_style_error_symbol = 'x'
#   let g:syntastic_style_warning_symbol = '!'
#   let g:syntastic_check_on_wq = 0
#   let g:syntastic_auto_loc_list = 1
#   let g:syntastic_auto_jump = 3
#   let g:syntastic_always_populate_loc_list = 2
#
#   source $VIMDIR/config/plugins/extension/syntastic.vim
#
#   hi SyntasticErrorSign ctermfg=160
#   hi SyntasticWarningSign ctermfg=220
# '''

# [[plugins]]
# repo        = 'osyo-manga/vim-watchdogs'
# depends     = ['vim-quickrun', 'vimproc', 'shabadou.vim']
# on_cmd      = 'WatchdogsRun'
# hook_add    = '''
#     nnoremap <silent> <Leader>c :<C-u>WatchdogsRun<CR>
# '''
# hook_source = '''
#     let g:watchdogs_check_BufWritePost_enables = {
#         \ 'python': 1
#         \}
#     let g:watchdogs_check_CursorHold_enables = {
#         \ 'python': 1
#         \}
#     let g:watchdogs_check_BufWritePost_enable_on_wq = 0
# '''
# hook_post_source = '''
#     source $VIMDIR/config/plugins/extension/watchdogs.vim
# '''

# [[plugins]]
# repo      = 'osyo-manga/shabadou.vim'
# on_source = ['vim-watchdogs', 'vim-quickrun']

# [[plugins]]
# repo      = 'cohama/vim-hier'
# on_source = ['vim-watchdogs']

# [[plugins]]
# repo      = 'dannyob/quickfixstatus'
# on_source = ['vim-watchdogs']

# [[plugins]]
# repo      = 'syngan/vim-vimlint'
# depends   = 'vim-vimlparser'
# on_ft     = 'vim'
# on_source = ['vim-watchdogs']

# [[plugins]]
# repo      = 'syngan/vim-vimlparser'
# on_source = 'vim-vimlint'
#}}}

# Utilities  #{{{
[[plugins]]
repo        = 'osyo-manga/vim-precious'
depends     = ['context_filetype.vim']
on_cmd      = ['PreciousSwitch', 'PreciousReset']

[[plugins]]
repo        = 'vim-jp/autofmt'

[[plugins]]
repo        = 'tpope/vim-endwise'
on_ft       = ['c', 'cpp', 'ruby', 'crystal', 'elixir', 'lua', 'sh', 'zsh', 'vim']
on_event    = 'InsertEnter'

[[plugins]]
repo        = 'tpope/vim-commentary'
on_cmd      = 'Commentary'
hook_add    = '''
    map <silent> <Leader>c :Commentary<CR>
'''

[[plugins]]
repo        = 'h1mesuke/vim-alignta'
on_cmd      = 'Align'

[[plugins]]
repo        = 'thinca/vim-template'
on_cmd      = 'TemplateLoad'
hook_add    = '''
    augroup MyTemplates
        autocmd!
        autocmd BufNewFile *.h,*.hpp execute 'TemplateLoad /init.h'
        autocmd BufNewFile *.d       execute 'TemplateLoad /init.d'
        autocmd BufNewFile *.java    execute 'TemplateLoad /init.java'
    augroup END
'''
#}}}

# Filetypes  #{{{
# Vim  #{{{
[[plugins]]
repo      = 'ynkdir/vim-vimlparser'
on_source = 'vim-vimlint'

[[plugins]]
repo      = 'syngan/vim-vimlint'
depends   = 'vim-vimlparser'
on_func   = 'vimlint#vimlint'
#}}}

# C/C++  #{{{
[[plugins]]
repo      = 'vim-jp/cpp-vim'
on_ft     = ['c', 'cpp']

[[plugins]]
repo        = 'justmao945/vim-clang'
if          = "executable('clang')"
on_ft       = ['c', 'cpp']
hook_source = '''
    let g:clang_auto = 1
    let g:clang_c_completeopt   = 'menuone,noselect,longest'
    let g:clang_cpp_completeopt = 'menuone,noselect,longest'

    let g:clang_cpp_options = '-std=c++1y'
    if IsMac()
        let g:clang_cpp_options = g:clang_cpp_options . ' -stdlib=libc++'
    endif
'''

[[plugins]]
repo        = 'rhysd/vim-clang-format'
if          = "executable('clang-format')"
on_ft       = ['c', 'cpp']
depends     = ['vimproc', 'vim-operator-user']
hook_source = '''
    nnoremap = :<C-u>ClangFormat<CR>
    vnoremap = :ClangFormat<CR>

    if executable('cppman')
        autocmd MyCmdGroup FileType cpp set keywordprg=cppman
    endif

    let g:clang_format#command = 'clang-format'
    let g:clang_format#code_style = 'LLVM'
    let g:clang_format#style_options = {
        \ 'TabWidth': 4,
        \ 'AccessModifierOffset': 0,
        \ 'AlignConsecutiveAssignments': 'true',
        \ 'AlignEscapedNewlinesLeft': 'true',
        \ 'AllowAllParametersOfDeclarationOnNextLine': 'false',
        \ 'AllowShortFunctionsOnASingleLine': 'true',
        \ 'BraceWrapping': {'AfterFunction': 'true'},
        \ 'BreakBeforeBraces': 'Stroustrup',
        \ 'BreakConstructorInitializersBeforeComma': 'true',
        \ 'SpacesBeforeTrailingComments': 2,
        \ 'CommentPragmas': '\*'
        \}
    let g:clang_format#filetype_style_options = {
        \ 'cpp': {'Standard': "C++11"},
        \}
'''

[[plugins]]
repo        = 'zchee/deoplete-clang'
if          = "has('nvim')"
on_ft       = ['c', 'cpp', 'cmake']
on_event    = 'InsertEnter'
depends     = ['deoplete.nvim']
hook_source = '''
    if IsMac()
        let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.dylib'
        let g:deoplete#sources#clang#clang_header  = '/usr/local/opt/llvm/include'
    endif
'''

[[plugins]]
repo        = 'critiqjo/lldb.nvim'
if          = 'has("nvim")'
on_cmd      = ['LL', 'LLsession', 'LLmode']

[[plugins]]
repo        = 'DoxygenToolkit.vim'
on_ft       = ['c', 'cpp']
#}}}

# Dlang  #{{{
[[plugins]]
repo      = 'JesseKPhillips/d.vim'
on_ft     = 'd'
#}}}

# Java  #{{{
[[plugins]]
repo      = 'artur-shaik/vim-javacomplete2'
on_ft     = 'java'
#}}}

# Ruby  #{{{
[[plugins]]
repo        = 'vim-ruby/vim-ruby'
on_ft       = 'ruby'
on_map      = '<Plug>'
hook_add    = '''
    let g:ruby_path = ""
'''
hook_source = '''
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
'''
#}}}

# Python  #{{{
[[plugins]]
repo      = 'Flake8-vim'
on_ft     = 'python'
if        = "has('python')"

[[plugins]]
repo      = 'hynek/vim-python-pep8-indent'
on_ft     = 'python'

[[plugins]]
repo      = 'zchee/deoplete-jedi'
if        = "has('nvim')"
on_ft     = 'python'
depends   = 'deoplete.nvim'

[[plugins]]
repo      = 'Yggdroot/indentLine'
on_ft     = ['python']
on_cmd    = 'IndentLineToggle'
on_source = '''
    let g:indentLine_enabled = 1
    let g:indentLine_char = '|'
    let g:indentLine_fileType = ['python']

    hi Conceal ctermfg=111 ctermbg=NONE guifg=#708090 guibg=NONE
'''
#}}}

# R  #{{{
[[plugins]]
repo      = 'jalvesaq/Nvim-R'
if        = "has('nvim')"
on_ft     = 'r'
#}}}

# Markdown  #{{{
[[plugins]]
repo      = 'rcmdnk/vim-markdown'
on_ft     = ['markdown', 'mkd']

[[plugins]]
repo      = 'kannokanno/previm'
on_ft     = ['markdown', 'rst', 'mkd']
depends   = 'open-browser.vim'
#}}}

# LaTeX  #{{{
[[plugins]]
repo        = 'vim-latex/vim-latex'
on_ft       = ['latex']
hook_add    = '''
    let g:tex_flavor = 'latex'
'''
hook_source = '''
    set conceallevel=0
'''
#}}}

# Web development  #{{{
[[plugins]]
repo      = 'HTML-AutoCloseTag'
on_ft     = ['html', 'xml']

[[plugins]]
repo      = 'hail2u/vim-css3-syntax'
on_ft     = 'css'

[[plugins]]
repo      = 'jiangmiao/simple-javascript-indenter'
on_ft     = 'javascript'

[[plugins]]
repo      = 'jelera/vim-javascript-syntax'
on_ft     = 'javascript'
#}}}

# Data structure  #{{{
[[plugins]]
repo      = 'cespare/vim-toml'
on_ft     = 'toml'
hook_add  = '''
    autocmd BufNewFile,BufRead *.toml set filetype=toml
'''

[[plugins]]
repo      = 'elzr/vim-json'
on_ft     = 'json'
#}}}

# Minor langs  #{{{
[[plugins]]
repo      = 'zah/nim.vim'
on_ft     = 'nim'

[[plugins]]
repo      = 'elixir-lang/vim-elixir'
on_ft     = 'elixir'

[[plugins]]
repo      = 'rhysd/vim-crystal'
on_ft     = 'crystal'

[[plugins]]
repo      = 'xolox/vim-lua-ftplugin'
depends   = 'vim-misc'
on_ft     = 'lua'

[[plugins]]
repo      = 'racer-rust/vim-racer'
on_ft     = 'rust'

[[plugins]]
repo      = 'rust-lang/rust.vim'
on_ft     = 'rust'

[[plugins]]
repo      = 'thinca/vim-ft-help_fold'
on_ft     = 'help'

[[plugins]]
repo      = 'rsmenon/vim-mathematica'
on_ft     = 'matlab'

[[plugins]]
repo      = 'maxima.vim'

[[plugins]]
repo      = 'dart-lang/dart-vim-plugin'
on_ft     = 'dart'
#}}}
#}}}
#}}}


# Utilities  #{{{
[[plugins]]
repo        = 'mtth/scratch.vim'
on_map      = ['gs', 'gS']
hook_source = '''
    let g:scratch_insert_autohide = 0

    autocmd! FileType scratch nnoremap <buffer><silent> q :<C-u>ScratchPreview<CR>
'''

[[plugins]]
repo        = 'thinca/vim-guicolorscheme'
if          = "!has('gui_running') || has('nvim')"

[[plugins]]
repo        = 'itchyny/calendar.vim'
on_cmd      = 'Calendar'
#}}}
