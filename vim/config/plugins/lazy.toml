# Completion  #{{{
[[plugins]]
repo        = 'Shougo/context_filetype.vim'
on_source   = ['deoplete.nvim', 'neocomplete.vim', 'neosnippet.vim']
hook_add    = '''
    if !exists('g:context_filetype#filetypes')
        let g:context_filetype#filetypes = {}
    endif
'''
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/context_filetype.vim
'''

[[plugins]]
repo        = 'Shougo/deoplete.nvim'
depends     = 'context_filetype.vim'
on_source   = ['deoplete-clang', 'deoplete-jedi', 'deoplete-zsh', 'deoplete-d']
if          = "has('nvim') && has('python')"
on_event    = 'InsertEnter'
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/deoplete.config.nvim
    source $VIMDIR/config/plugins/hook_source/deoplete.mapping.nvim
'''

[[plugins]]
repo        = 'Shougo/neocomplete.vim'
depends     = 'context_filetype.vim'
if          = "!has('nvim') && has('lua')"
on_event    = 'InsertEnter'
hook_source = '''
    source $VIMDIR/config/plugins/extension/neocomplete.vim
    inoremap <expr><TAB> pumvisible() ? "\<Down>" : "\<Tab>"
'''

[[plugins]]
repo        = 'Shougo/neosnippet.vim'
on_source   = ['neocomplete.vim', 'deoplete.nvim']
hook_source = '''
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#snippets_directory = $VIMDIR.'/snippets'

    source $VIMDIR/config/plugins/hook_source/neosnippet.mapping.vim
'''

[[plugins]]
repo        = 'Shougo/neosnippet-snippets'
on_source   = 'neosnippet.vim'

[[plugins]]
repo        = 'Shougo/neoinclude.vim'
on_source   = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo        = 'ujihisa/neco-look'
on_source   = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo        = 'Shougo/neco-syntax'
on_source   = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo        = 'Shougo/neco-vim'
on_ft       = 'vim'

[[plugins]]
repo        = 'Shougo/echodoc.vim'
on_event    = 'InsertEnter'
hook_add    = '''
    set noshowmode
    let g:echodoc#enable_at_startup = 1
'''
#}}}


# Denite  #{{{
[[plugins]]
repo        = 'Shougo/neomru.vim'
on_path     = '.*'
on_source   = ['unite.vim', 'denite.nvim']

[[plugins]]
repo        = 'Shougo/denite.nvim'
on_cmd      = 'Denite'
on_source   = 'denite-experimental.nvim'
if          = "has('nvim') && has('python')"
hook_add    = '''
    source $VIMDIR/config/plugins/hook_add/denite.nvim
'''
hook_post_source = '''
    source $VIMDIR/config/plugins/hook_post_source/denite.nvim
'''

[[plugins]]
repo        = 'Shougo/neoyank.vim'
on_source   = ['denite.nvim']

[[plugins]]
repo        = 'chemzqm/unite-location'
depends     = 'denite.nvim'
on_cmd      = ['Denite']
#}}}


# Operator  #{{{
[[plugins]]
repo        = 'terryma/vim-expand-region'
on_map      = '<Plug>'
hook_add    = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/expand_region.vim
'''

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = '<Plug>'
hook_add    = '''
    source $VIMDIR/config/plugins/hook_add/easymotion.vim
'''
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/easymotion.vim
'''

[[plugins]]
repo        = 'kana/vim-operator-user'
on_source   = ['vim-operator-replace', 'vim-operator-surround', 'vim-clang-format']
on_path     = '.*'

[[plugins]]
repo        = 'kana/vim-operator-replace'
depends     = 'vim-operator-user'
on_map      = [['nx', '<Plug>']]
hook_add    = '''
    xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo        = 'rhysd/vim-operator-surround'
depends     = ['vim-operator-user', 'vim-textobj-anyblock']
on_map      = '<Plug>'
hook_add    = '''
    nmap <silent>ys <Plug>(operator-surround-append)iw
    nmap <silent>ds <Plug>(operator-surround-delete)ab
    nmap <silent>cs <Plug>(operator-surround-replace)ab

    xmap <silent>ys <Plug>(operator-surround-append)
    xmap <silent>ds <Plug>(operator-surround-delete)
    xmap <silent>cs <Plug>(operator-surround-replace)
'''

[[plugins]]
repo        = 'chikatoike/concealedyank.vim'
on_map      = [['x', '<Plug>(operator-concealedyank)']]

[[plugins]]
repo        = 'kana/vim-textobj-user'
on_source   = 'vim-textobj-line'

[[plugins]]
repo        = 'kana/vim-textobj-line'
on_source   = 'vim-expand-region'
depends     = 'vim-textobj-user'

[[plugins]]
repo        = 'rhysd/vim-textobj-anyblock'
depends     = ['vim-textobj-user']
on_source   = 'vim-operator-surround'

[[plugins]]
repo        = 'AndrewRadev/switch.vim'
on_cmd      = ['Switch', 'SwitchReverse']
hook_add    = '''
    nnoremap <silent> <Leader>s :<C-u>Switch<CR>
    nnoremap <silent> <Leader>S :<C-u>SwitchReverse<CR>
'''
hook_source = '''
    let g:switch_mapping = ""
'''

[[plugins]]
repo        = 'osyo-manga/vim-operator-highlighter'
on_map      = '<Plug>'
hook_add    = '''
    let g:operator#highlighter#config = {
        \  'group': 'Search',
        \  'clear_time' : 3000
        \}

    noremap <Plug>(yank) y
    xnoremap <expr> y operator#sequence#map("\<Plug>(operator-highlighter-once)", "\<Plug>(yank)")
'''

[[plugins]]
repo       = 'haya14busa/vim-asterisk'
on_map     = '<Plug>'
hook_add   = '''
    map * <Plug>(asterisk-z*)
    map g* <Plug>(asterisk-gz*)
    map # <Plug>(asterisk-z#)
    map g# <Plug>(asterisk-gz#)
'''
#}}}


# Terminal  #{{{
[[plugins]]
repo        = 'Shougo/deol.nvim'
on_cmd      = ['Deol', 'DeolEdit']
on_source   = 'denite.nvim'
hook_source = '''
    let g:deol#prompt_pattern = '% \|%$'
'''
#}}}


# External  #{{{
[[plugins]]
repo        = 'itchyny/vim-external'
on_map      = '<Plug>'
hook_add    = '''
    nnoremap [external] <Nop>
    nmap <Leader>e [external]
    nmap <silent>  [external]e <Plug>(external-explorer)
    nmap <silent>  [external]b <Plug>(external-browser)
'''

# Filer  #{{{
[[plugins]]
repo        = 'scrooloose/nerdtree'
on_cmd      = ['NERDTree', 'NERDTreeFind', 'NERDTreeToggle']
hook_add    = '''
    nmap <silent> <Leader>f :<C-u>NERDTreeToggle<CR>
'''
hook_source = '''
    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeQuitOnOpen = 0
    let g:NERDTreeShowHidden = 1
'''
#}}}

# Shell  #{{{
[[plugins]]
repo        = 'Shougo/vimshell'
if          = "!has('nvim')"
on_map      = '<Plug>'
on_cmd      = ['VimShell', 'VimShellPop']
hook_add    = '''
    noremap  <Plug>(vimshell_toggle) :VimShell -toggle<CR>
    nnoremap <C-s> :<C-u>VimShellPop -toggle<CR>
    inoremap <C-s> <C-[>:<C-u>VimShellPop -toggle<CR>
'''
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/vimshell.vim
'''
#}}}

# Browser  #{{{
[[plugins]]
repo        = 'koron/codic-vim'
on_cmd      = 'Codic'

[[plugins]]
repo        = 'mattn/webapi-vim'
on_source   = ['excitetranslate-vim']

[[plugins]]
repo        = 'mattn/excitetranslate-vim'
depends     = 'webapi-vim'
on_cmd      = 'ExciteTranslate'

[[plugins]]
repo        = 'yuratomo/w3m.vim'
on_cmd      = ['W3m', 'W3mTab', 'W3mSplit', 'W3mVsplit']

[[plugins]]
repo        = 'tyru/open-browser.vim'
on_map      = '<Plug>'
on_source   = ['previm']
#}}}
#}}}


# Development #{{{
# Tools  #{{{
[[plugins]]
repo        = 'lambdalisue/gina.vim'
on_cmd      = ['Gina']
on_func     = 'gina#'
hook_add    = '''
    source $VIMDIR/config/plugins/hook_add/gina.vim
'''
hook_source = '''
    augroup MyCmdGroup
        autocmd FileType gina-status nnoremap <buffer><silent> q :<C-u>q<CR>
        autocmd FileType gina-status nnoremap <buffer><silent> c :<C-u>Gina commit<CR>
        autocmd FileType gina-commit execute "normal! G"
    augroup END
'''

[[plugins]]
repo        = 'majutsushi/tagbar'
on_ft       = ['awk', 'c', 'cpp', 'd', 'java', 'python', 'ruby', 'tex', 'vim', 'R']
on_cmd      = 'TagbarToggle'
hook_add    = '''
    nnoremap <silent> <Leader>o :<C-u>TagbarToggle<CR>
'''
hook_source = '''
    let g:tagbar_compact = 1
    let g:tagbar_show_linenumbers = 1
    let g:tagbar_autoclose = 1
    let g:tagbar_autopreview = 1
    let g:tagbar_previewwin_pos = "below"
'''

[[plugins]]
repo        = 'vim-scripts/SrcExpl'
on_ft       = ['awk', 'c', 'cpp', 'd', 'java', 'python', 'ruby', 'tex']
on_cmd      = 'SrcExplToggle'
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/srcexpl.vim
'''

[[plugins]]
repo        = 'w0rp/ale'
on_map      = '<Plug>'
on_cmd      = ['ALEEnable', 'ALEToggle']
on_ft       = ['c', 'cpp', 'd', 'scala', 'python']
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/ale.config.vim
    source $VIMDIR/config/plugins/hook_source/ale.linter.vim
'''
hook_post_source = '''
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
#}}}

# Test  #{{{
[[plugins]]
repo        = 'thinca/vim-quickrun'
on_map      = '<Plug>'
on_source   = ['shabadou.vim', 'vim-watchdogs']
hook_add    = '''
    nmap <silent> <Leader>q <Plug>(quickrun)
'''
hook_source = '''
    source $VIMDIR/config/plugins/hook_source/quickrun.vim
'''

[[plugins]]
repo        = 'janko-m/vim-test'
on_cmd      = ['TestNearest', 'TestFile', 'TestSuite', 'TestLast', 'TestVisit']
hook_source = '''
    if dein#tap('neoterm')
        let test#strategy = 'neoterm'
    elseif has('nvim')
        let test#strategy = 'neovim'
    elseif dein#tap('vimproc')
        let test#strategy = 'vimproc'
    endif
'''
#}}}

# Utilities  #{{{
[[plugins]]
repo        = 'Yggdroot/indentLine'
on_ft       = ['c', 'cpp', 'scala', 'python', 'vim', 'json', 'toml']
on_cmd      = ['IndentLinesToggle', 'IndentLinesReset']
hook_add    = '''
    let g:indentLine_enabled = 1

    let g:indentLine_setConceal = 0
    let g:indentLine_conceallevel = 1
    let g:indentLine_concealcursor = 'inc'

    let g:indentLine_setColors = 0
    let g:indentLine_color_term = 111
    let g:indentLine_bgcolor_term = 240
    let g:indentLine_color_gui = '#708090'
    let g:indentLine_bgcolor_gui = 'NONE'
'''

[[plugins]]
repo        = 'osyo-manga/vim-precious'
depends     = ['context_filetype.vim']
on_cmd      = ['PreciousSwitch', 'PreciousReset']

[[plugins]]
repo        = 'vim-jp/autofmt'

[[plugins]]
repo        = 'cohama/lexima.vim'
on_event    = 'InsertEnter'

[[plugins]]
repo        = 'tpope/vim-commentary'
on_cmd      = 'Commentary'
hook_add    = '''
    map <silent> <Leader>c :Commentary<CR>
'''

[[plugins]]
repo        = 'h1mesuke/vim-alignta'
on_cmd      = 'Align'

[[plugins]]
repo        = 'thinca/vim-template'
on_cmd      = 'TemplateLoad'
hook_add    = '''
    source $VIMDIR/config/plugins/hook_add/template.vim
'''

[[plugins]]
repo        = 'sbdchd/neoformat'
on_cmd      = 'Neoformat'
hook_add    = '''
    source $VIMDIR/config/plugins/hook_add/neoformat.nvim
'''
hook_source = '''
    let g:neoformat_basic_format_trim = 1
'''
#}}}

# Filetypes  #{{{
# Vim  #{{{
[[plugins]]
repo      = 'ynkdir/vim-vimlparser'
on_source = 'vim-vimlint'

[[plugins]]
repo      = 'syngan/vim-vimlint'
depends   = 'vim-vimlparser'
on_func   = 'vimlint#vimlint'
#}}}

# C/C++  #{{{
[[plugins]]
repo      = 'vim-jp/cpp-vim'
on_ft     = ['c', 'cpp']

# [[plugins]]
# repo        = 'justmao945/vim-clang'
# if          = "executable('clang')"
# on_ft       = ['c', 'cpp']
# hook_source = '''
#     source $VIMDIR/config/plugins/hook_source/clang.vim
# '''

# [[plugins]]
# repo        = 'rhysd/vim-clang-format'
# if          = "executable('clang-format')"
# on_ft       = ['c', 'cpp']
# depends     = ['vimproc', 'vim-operator-user']
# on_source   = 'vim-clang'
# hook_add    = '''
#     autocmd MyCmdGroup FileType c,cpp nnoremap <buffer> = :<C-u>ClangFormat<CR>
#     autocmd MyCmdGroup FileType c,cpp vnoremap <buffer> = :ClangFormat<CR>
# '''
# hook_source = '''
#     " source $VIMDIR/config/plugins/hook_source/clang_format.vim
#     let g:clang_format#detect_style_file = 1
#     let g:clang_format#auto_format_on_insert_leave = 1
# '''

[[plugins]]
repo        = 'zchee/deoplete-clang'
if          = "has('nvim')"
on_ft       = ['c', 'cpp', 'cmake']
on_event    = 'InsertEnter'
depends     = ['deoplete.nvim']
hook_source = '''
    if IsMac()
        let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.dylib'
        let g:deoplete#sources#clang#clang_header  = '/usr/local/opt/llvm/include'
    endif
'''

[[plugins]]
repo        = 'critiqjo/lldb.nvim'
if          = 'has("nvim")'
on_cmd      = ['LL', 'LLsession', 'LLmode']

[[plugins]]
repo        = 'vim-scripts/DoxygenToolkit.vim'
on_ft       = ['c', 'cpp']
#}}}

# Dlang  #{{{
[[plugins]]
repo        = 'JesseKPhillips/d.vim'
on_ft       = 'd'

[[plugins]]
repo        = 'landaire/deoplete-d'
on_ft       = 'd'
on_if       = 'executable("dcd-server") && executable("dcd-client")'
on_event    = 'InsertEnter'
depends     = ['deoplete.nvim']
#}}}

# Java  #{{{
[[plugins]]
repo      = 'artur-shaik/vim-javacomplete2'
on_ft     = 'java'
#}}}

# Scala  #{{{
[[plugins]]
repo        = 'derekwyatt/vim-scala'
on_ft       = ['scala']
hook_source = '''
    autocmd MyCmdGroup BufWritePre *.scala SortScalaImports
'''
#}}}

# Ruby  #{{{
[[plugins]]
repo        = 'vim-ruby/vim-ruby'
on_ft       = 'ruby'
on_map      = '<Plug>'
hook_add    = '''
    let g:ruby_path = ''
'''
hook_source = '''
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
'''
#}}}

# Python  #{{{
[[plugins]]
repo      = 'vim-scripts/Flake8-vim'
on_ft     = 'python'
if        = "has('python')"

[[plugins]]
repo      = 'hynek/vim-python-pep8-indent'
on_ft     = 'python'

[[plugins]]
repo      = 'zchee/deoplete-jedi'
if        = "has('nvim')"
on_ft     = 'python'
depends   = 'deoplete.nvim'
#}}}

# Javascript  #{{{
[[plugins]]
repo      = 'pangloss/vim-javascript'
on_ft     = ['javascript']
#}}}

# R  #{{{
[[plugins]]
repo      = 'jalvesaq/Nvim-R'
if        = "has('nvim')"
on_ft     = 'r'
#}}}

# Markdown  #{{{
[[plugins]]
repo      = 'rcmdnk/vim-markdown'
on_ft     = ['markdown', 'mkd']

[[plugins]]
repo      = 'kannokanno/previm'
on_ft     = ['markdown', 'rst', 'mkd']
depends   = 'open-browser.vim'
#}}}

# LaTeX  #{{{
[[plugins]]
repo        = 'vim-latex/vim-latex'
on_ft       = ['latex', 'tex']
hook_add    = '''
    let g:tex_flavor = 'latex'
'''
hook_source = '''
    set conceallevel=0
'''
#}}}

# Web development  #{{{
[[plugins]]
repo      = 'vim-scripts/HTML-AutoCloseTag'
on_ft     = ['html', 'xml', 'php']

[[plugins]]
repo      = 'hail2u/vim-css3-syntax'
on_ft     = 'css'

[[plugins]]
repo      = 'nikvdp/ejs-syntax'
on_ft     = 'ejs'
hook_add  = '''
    autocmd BufNewFile,BufRead *.ejs set filetype=ejs
'''

[[plugins]]
repo        = 'mattn/emmet-vim'
on_ft       = ['html', 'xml', 'php']
#}}}

# Data structure  #{{{
[[plugins]]
repo      = 'cespare/vim-toml'
on_ft     = 'toml'
hook_add  = '''
    autocmd BufNewFile,BufRead *.toml set filetype=toml
'''

[[plugins]]
repo      = 'elzr/vim-json'
on_ft     = 'json'
#}}}

# Misc.  #{{{
[[plugins]]
repo      = 'zah/nim.vim'
on_ft     = 'nim'

[[plugins]]
repo      = 'elixir-lang/vim-elixir'
on_ft     = 'elixir'

[[plugins]]
repo      = 'rhysd/vim-crystal'
on_ft     = 'crystal'

[[plugins]]
repo      = 'xolox/vim-lua-ftplugin'
depends   = 'vim-misc'
on_ft     = 'lua'

[[plugins]]
repo      = 'racer-rust/vim-racer'
on_ft     = 'rust'

[[plugins]]
repo      = 'rust-lang/rust.vim'
on_ft     = 'rust'

[[plugins]]
repo      = 'thinca/vim-ft-help_fold'
on_ft     = 'help'

[[plugins]]
repo      = 'rsmenon/vim-mathematica'
on_ft     = 'matlab'

[[plugins]]
repo      = 'vim-scripts/maxima.vim'

[[plugins]]
repo      = 'dart-lang/dart-vim-plugin'
on_ft     = 'dart'

[[plugins]]
repo      = 'zchee/deoplete-zsh'
on_ft     = 'zsh'
depends   = ['deoplete.nvim']
#}}}
#}}}
#}}}


# Utilities  #{{{
[[plugins]]
repo        = 'thinca/vim-qfreplace'
on_ft       = ['unite', 'quickfix']

[[plugins]]
repo        = 'mtth/scratch.vim'
on_cmd      = ['Scratch', 'ScratchInsert', 'ScratchSelection', 'ScratchPreview']
hook_add    = '''
    let g:scratch_no_mappings = 1
    nnoremap <silent> <Leader>s :<C-u>ScratchPreview<CR>
'''
hook_source = '''
    let g:scratch_insert_autohide = 0
    autocmd! FileType scratch nnoremap <buffer><silent> q :<C-u>ScratchPreview<CR>
'''

[[plugins]]
repo        = 'vim-scripts/autodate.vim'
on_event    = 'InsertEnter'
hook_add    = '''
    let autodate_keyword_pre  = "Last Change:"
    let autodate_keyword_post = "."
    let autodate_format       = "%d %b. %Y"
'''

[[plugins]]
repo        = 'thinca/vim-guicolorscheme'
if          = "!has('gui_running') || has('nvim')"

[[plugins]]
repo        = 'itchyny/calendar.vim'
on_cmd      = 'Calendar'
#}}}
