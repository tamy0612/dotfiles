"================================================
" System
"================================================
if &compatible
  set nocompatible
endif

let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin  = has('win32unix')
let s:is_sudo    = $SUDO_USER !=# '' && $USER !=# $SUDO_USER
                   \ && $HOME !=# expand('~'.$USER)
                   \ && $HOME ==# expand('~'.$SUDO_USER)
let s:is_gui     = has('gui_running')
let s:is_nvim    = has('nvim')

function! IsWindows() abort
  return s:is_windows || s:is_cygwin
endfunction

function! IsMac() abort
  return !IsWindows()
          \ && ( has('mac') || has('macunix') || has('gui_macvim')
          \      || ( !executable('xdg-open') && system('uname') =~? '^darwin' ) )
endfunction

function! IsLinux()
  return !IsWindows() && !IsMac() && has('unix')
endfunction

function! IsSUDO()
  return s:is_sudo
endfunction

function! IsGUI() abort
  return s:is_gui
endfunction

function! IsNVim()
  return s:is_nvim
endfunction


"================================================
" Initialize
"================================================
function! s:source_config( path ) abort
  execute 'source' fnameescape( $VIMDIR . '/config/' . a:path )
endfunction

"" My augroup
augroup MyCmdGroup
  autocmd!
augroup END

"" message lang
if IsWindows()
  language message en
else
  language message C
endif

"" Private vimrc
if filereadable( $HOME . '/.vimrc.mine' )
  let g:private_vimrc = $HOME . '/.vimrc.mine'
  execute 'source' g:private_vimrc
endif

"" Runtime path
if IsWindows()
  set runtimepath^=$VIMDIR
  set runtimepath+=$VIMDIR/after
endif

"" Shell
set shell=zsh
if IsWindows()
  set shellslash
endif

"" Cache
if !exists('$CACHE_DIR')
  let $CACHE_DIR = expand('~/.cache')
endif
if !isdirectory(expand($CACHE_DIR))
  echo "Creating cache dir..."
  call mkdir(expand($CACHE_DIR), 'p')
endif

"" Backup
set backupdir=$CACHE_DIR/vim/back
if !isdirectory(expand(&backupdir))
  echo "Creating backup dir..."
  call mkdir(expand(&backupdir), 'p')
endif
set noswapfile
set undofile
let &undodir = &backupdir


"================================================
" encoding
"================================================
call s:source_config('encoding.vim')


"================================================
" Plugins
"================================================
" Python config
let g:loaded_python_provider = 1
let g:python_host_skip_check = 1
if exists('$PYENV_ROOT')
  let g:python3_host_prog = $PYENV_ROOT.'/shims/python3'
else
  let g:python3_host_prog = substitute(system('which python3'), '\n', '', 'g')
endif

call s:source_config('dein.vim')

call s:source_config('plugins.vim')

if has('vim_starting')
  if dein#check_install(['vimproc'])
    call dein#install(['vimproc'])
  endif
  if dein#check_install()
    call dein#install()
  endif
endif

filetype plugin indent on
syntax enable


"================================================
" Environment
"================================================
call s:source_config('view.vim')

call s:source_config('edit.vim')

" for NoeVim
if IsNVim()
  call s:source_config('neovim.vim')
endif

" for GUI env
if !IsNVim() && IsGUI()
  call s:source_config('gui.vim')
endif


"================================================
" key mappings
"================================================
call s:source_config('mappings.vim')


"================================================
" Etc.
"================================================
set helplang&
set helplang=en,ja

let t:cwd = getcwd()

set secure


" vim:ft=vim:ts=2:sw=2
