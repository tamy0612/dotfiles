#================================================
# vim/config/dein/devtools.toml
#================================================
# git  #{{{
[[plugins]]
repo        = 'lambdalisue/gina.vim'
on_cmd      = ['Gina']
on_func     = 'gina#'
hook_add    = '''
  command! -nargs=* Git Gina <q-args>
  autocmd MyCmdGroup FileType gina-commit execute "normal! G"
'''
hook_source = '''
  for kind in ['log', 'status', 'diff']
    call gina#custom#command#option(kind, '--opener', 'split')
    execute 'autocmd' 'MyCmdGroup Filetype gine-' . kind . ' nnoremap q :q<CR>'
  endfor
'''

[[plugins]]
repo        = 'airblade/vim-gitgutter'
on_func     = ['GitGutterEnable']
hook_add    = '''
  let g:gitgutter_async   = 1
  let g:gitgutter_highlight_lines = 0

  let g:gitgutter_sign_added    = '+'
  let g:gitgutter_sign_modified = '*'
  let g:gitgutter_sign_removed  = '-'
  let g:gitgutter_sign_modified_removed = '*'

  autocmd MyCmdGroup BufWinEnter * :GitGutterEnable

  noremap [git] <Nop>
  map <C-g> [git]
  nmap <silent> [git]h :GitGutterLineHighlightsToggle<CR>
  nmap <silent> [git]n :GitGutterNextHunk<CR>
  nmap <silent> [git]p :GitGutterPrevHunk<CR>
'''
#}}}


# tags  #{{{
[[plugins]]
repo        = 'majutsushi/tagbar'
on_ft       = ['awk', 'c', 'cpp', 'd', 'rust','java', 'python', 'ruby', 'R']
on_cmd      = 'TagbarToggle'
hook_source = '''
  let g:tagbar_compact = 1
  let g:tagbar_show_linenumbers = 1
  let g:tagbar_autoclose = 1
  let g:tagbar_autopreview = 1
  let g:tagbar_previewwin_pos = 'topleft'
'''

[[plugins]]
repo        = 'vim-scripts/SrcExpl'
on_ft       = ['awk', 'c', 'cpp', 'd', 'java', 'python', 'ruby', 'tex']
on_cmd      = 'SrcExplToggle'
hook_source = '''
  let s:cwd = getcwd()
  if isdirectory(s:cwd . '/src')
    let s:src_dir = s:cwd . '/src'
  elseif isdirectory(s:cwd . '/source')
    let s:src_dir = s:cwd . '/source'
  else
    let s:src_dir = s:cwd
  endif

  let g:SrcExpl_winHeight     = 20
  let g:SrcExpl_updateTagsCmd = 'ctags --sort=foldcase -R ' . s:src_dir

  if has('cscope')
    set csprg=cscope
    set csto=0
    set cst
    set nocsverb
    if filereadable('cscope.out')
        cs add cscope.out
    elseif $CSCOPE_DB !=# ''
        cs add $CSCOPE_DB
    endif
    set csverb
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif
'''

[[plugins]]
repo        = 'vim-scripts/gtags.vim'
on_cmd      = 'Gtags'
hook_add    = '''
  let g:Gtags_Auto_Map = 0
  let g:Gtags_OpenQuickfixWindow = 1

  nnoremap <silent> <C-j> :<C-u>exe("Gtags ".expand('<cword>'))<CR>
  nnoremap <silent> <C-r> :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
'''

[[plugins]]
repo        = 'jsfaint/gen_tags.vim'
on_event    = 'InsertEnter'
hook_add    = '''
  let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo        = 'ozelentok/denite-gtags'
depends     = ['denite.nvim']
hook_add    = '''
  nnoremap [denite]t :Denite -no-auto-preview -vertical-preview gtags_completion<CR>
'''
#}}}


# LSP  #{{{
[[plugins]]
repo        = 'autozimu/LanguageClient-neovim'
rev         = 'next'
on_ft       = ['rust', 'javascript', 'typescript']
build       = 'bash install.sh'
hook_add    = '''
  set hidden
  let g:LanguageClient_autoStart = 1
  let g:LanguageClient_serverCommands = get(g:, 'LanguageClient_serverCommands', {})
'''
hook_source = '''
  source $VIMDIR/config/dein/rc/lsp.vim
  nnoremap <silent> <C-k> :<C-u>call LanguageClient_textDocument_hover()<CR>
  nnoremap <silent> gd :<C-u>call LanguageClient_textDocument_definition()<CR>
  command! -nargs=0 Rename call LanguageClient_textDocument_rename()
'''
#}}}


# linter  #{{{
[[plugins]]
repo        = 'w0rp/ale'
on_map      = '<Plug>'
on_cmd      = ['ALEEnable', 'ALEToggle']
on_ft       = ['c', 'cpp', 'd', 'rust', 'typescript', 'python', 'php']
hook_add    = '''
  let g:ale_lint_on_save          = 1
  let g:ale_lint_on_text_changed  = 'normal'
  let g:ale_lint_on_enter         = 0
  let g:ale_open_list             = 1
  let g:ale_keep_list_window_open = 0
  let g:ale_sign_error = 'âœ—'
  let g:ale_sign_warning = '!'
  let g:ale_echo_msg_error_str    = g:ale_sign_error
  let g:ale_echo_msg_warning_str  = g:ale_sign_warning
  let g:ale_echo_msg_format       = '[%linter%] %s [%severity%]'

  let g:ale_linters = get(g:, 'ale_linters', {})
  source $VIMDIR/config/dein/rc/ale.vim
'''
hook_source = '''
  nmap <silent> <C-p> <Plug>(ale_previous_wrap)
  nmap <silent> <C-n> <Plug>(ale_next_wrap)
'''
#}}}


# test  #{{{
[[plugins]]
repo        = 'thinca/vim-quickrun'
on_map      = '<Plug>'
hook_add    = '''
  nmap <silent> <Leader>r <Plug>(quickrun)
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  source $VIMDIR/config/dein/rc/quickrun.vim
'''

[[plugins]]
repo        = 'tamy0612/quickrun-job-runner.nvim'
on_source   = 'vim-quickrun'

[[plugins]]
repo        = 'osyo-manga/shabadou.vim'
on_source   = 'vim-quickrun'

[[plugins]]
repo        = 'janko-m/vim-test'
on_cmd      = ['TestNearest', 'TestFile', 'TestSuite', 'TestLast', 'TestVisit']
hook_source = '''
  if dein#tap('asyncrun.vim')
    let test#strategy = 'asyncrun'
  elseif has('nvim')
    let test#strategy = 'neovim'
  else
    let test#strategy = 'vimterminal'
  endif
'''
#}}}


# format  #{{{
[[plugins]]
repo        = 'Yggdroot/indentLine'
on_ft       = ['c', 'cpp', 'rust', 'scala', 'python', 'vim', 'json', 'toml']
on_cmd      = ['IndentLinesToggle', 'IndentLinesReset']
hook_add    = '''
  let g:indentLine_enabled = 1
  let g:indentLine_leadingSpaceEnabled = 1

  let g:indentLine_setConceal = 1
  let g:indentLine_conceallevel = 1
  let g:indentLine_concealcursor = ''

  let g:indentLine_char = '|'
  let g:indentLine_leadingSpaceChar = '.'

  let g:indentLine_setColors = 1
  let g:indentLine_color_term = 243
'''

[[plugins]]
repo        = 'osyo-manga/vim-precious'
depends     = ['context_filetype.vim']
on_cmd      = ['PreciousSwitch', 'PreciousReset']

[[plugins]]
repo        = 'tpope/vim-commentary'
on_cmd      = 'Commentary'
hook_add    = '''
  map <silent> <Leader>c :Commentary<CR>
'''

[[plugins]]
repo        = 'h1mesuke/vim-alignta'
on_cmd      = 'Align'

[[plugins]]
repo        = 'cohama/lexima.vim'
on_event    = 'InsertEnter'

[[plugins]]
repo        = 'sbdchd/neoformat'
on_cmd      = 'Neoformat'
hook_add    = '''
  source $VIMDIR/config/dein/rc/neoformat.vim
  for config in keys(g:neoformat_rules)
    execute 'autocmd' 'MyCmdGroup BufWritePre ' . g:neoformat_rules[config].pattern . ' undojoin|Neoformat! ' . config
    execute 'autocmd' 'MyCmdGroup FileType ' . g:neoformat_rules[config].filetype . ' nnoremap <buffer> = :<C-u>Neoformat! ' . config . '<CR>'
  endfor
'''

[[plugins]]
repo        = 'vim-scripts/autodate.vim'
on_event    = 'BufWritePre'
hook_source = '''
  let g:autodate_keyword_pre  = "Last Change:"
  let g:autodate_keyword_post = "."
  let g:autodate_format       = "%d %b. %Y"
'''

[[plugins]]
repo        = 'thinca/vim-qfreplace'
on_cmd      = ['Qfreplace']
#}}}
# vim:ft=toml:ts=2:sw=2:fdm=marker:et
